"""
Ï†ïÎ∂ÄÏßÄÏõêÏÇ¨ÏóÖ ÎßûÏ∂§ Ï∂îÏ≤ú MVP
Streamlit Cloud Î∞∞Ìè¨Ïö© Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò
"""
import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime, timedelta
from supabase import create_client
from config_cloud import SUPABASE_URL, SUPABASE_KEY

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Ï†ïÎ∂ÄÏßÄÏõêÏÇ¨ÏóÖ ÎßûÏ∂§ Ï∂îÏ≤ú MVP",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_resource
def init_supabase():
    """Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî"""
    try:
        if not SUPABASE_URL or not SUPABASE_KEY:
            st.error("‚ùå Supabase ÏÑ§Ï†ïÏù¥ ÏóÜÏäµÎãàÎã§. config_cloud.py ÌååÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
            st.stop()
        
        return create_client(SUPABASE_URL, SUPABASE_KEY)
    except Exception as e:
        st.error(f"‚ùå Supabase Ïó∞Í≤∞ Ïã§Ìå®: {e}")
        st.error("Supabase ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
        st.stop()

def calculate_dday(application_period):
    """D-Day Í≥ÑÏÇ∞"""
    if pd.isna(application_period) or not application_period:
        return None
    
    try:
        period_str = str(application_period).strip()
        if not period_str or period_str in ['', 'ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ≥Ñ ÏÉÅÏù¥', '-']:
            return None
        
        # YYYYMMDD ÌòïÏãù Ï≤òÎ¶¨
        if len(period_str) == 8 and period_str.isdigit():
            year = int(period_str[:4])
            month = int(period_str[4:6])
            day = int(period_str[6:8])
            end_date = datetime(year, month, day)
        elif '~' in period_str:
            end_date_str = period_str.split('~')[1].strip()
            date_formats = ['%Y-%m-%d', '%Y.%m.%d', '%m/%d/%Y', '%d/%m/%Y', '%Y%m%d']
            end_date = None
            for fmt in date_formats:
                try:
                    end_date = datetime.strptime(end_date_str, fmt)
                    break
                except ValueError:
                    continue
        else:
            date_formats = ['%Y-%m-%d', '%Y.%m.%d', '%m/%d/%Y', '%d/%m/%Y', '%Y%m%d']
            end_date = None
            for fmt in date_formats:
                try:
                    end_date = datetime.strptime(period_str, fmt)
                    break
                except ValueError:
                    continue
        
        if end_date:
            today = datetime.now()
            delta = end_date - today
            return delta.days
    except Exception:
        pass
    
    return None

def load_company_data():
    """ÌöåÏÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
    try:
        supabase = init_supabase()
        result = supabase.table('alpha_companies3').select('*').execute()
        df = pd.DataFrame(result.data)
        # Ïª¨ÎüºÎ™Ö Îß§Ìïë (Í∏∞ÏóÖÎ™Ö -> ÌöåÏÇ¨Î™Ö)
        if 'Í∏∞ÏóÖÎ™Ö' in df.columns:
            df = df.rename(columns={'Í∏∞ÏóÖÎ™Ö': 'ÌöåÏÇ¨Î™Ö'})
        return df
    except Exception as e:
        st.error(f"ÌöåÏÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
        return pd.DataFrame()

def load_recommendations(company_name):
    """Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
    try:
        supabase = init_supabase()
        result = supabase.table('recommend_5').select('*').eq('ÌöåÏÇ¨Î™Ö', company_name).execute()
        return pd.DataFrame(result.data)
    except Exception as e:
        st.error(f"Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
        return pd.DataFrame()

def render_custom_recommendations(company_name: str):
    """ÎßûÏ∂§ Ï∂îÏ≤ú ÌÉ≠"""
    st.subheader("üéØ ÎßûÏ∂§ Ï∂îÏ≤ú")
    
    # Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    recommendations_df = load_recommendations(company_name)
    
    if recommendations_df.empty:
        st.info("Ìï¥Îãπ ÌöåÏÇ¨Ïóê ÎåÄÌïú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    # Ïª¨ÎüºÎ™Ö Îß§Ìïë
    column_mapping = {
        'Í≥µÍ≥†Î™Ö': 'announcement_title',
        'Í≥µÍ≥†_Í∏∞Í¥Ä': 'agency',
        'Í≥µÍ≥†_ÏßÄÏó≠': 'region',
        'Í≥µÍ≥†_ÏßÄÏõêÎ∂ÑÏïº': 'support_field',
        'Í≥µÍ≥†_Ïã†Ï≤≠Í∏∞Í∞Ñ': 'application_period',
        'Í≥µÍ≥†_ÎÇ¥Ïö©': 'announcement_content',
        'Ï∂îÏ≤ú_Ïù¥Ïú†': 'reason',
        'Í≥µÍ≥†_URL': 'url',
        'Ï∂îÏ≤ú_Ï†êÏàò': 'score',
        'ÏÉùÏÑ±_ÏãúÍ∞Ñ': 'created_at'
    }
    
    recommendations_df = recommendations_df.rename(columns=column_mapping)
    
    # ÌïÑÌÑ∞ÎßÅ ÏòµÏÖò
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # Ï†êÏàò ÌïÑÌÑ∞ (0-1 Î≤îÏúÑÎ•º 0-100ÏúºÎ°ú Î≥ÄÌôò)
        min_score = st.slider("ÏµúÏÜå Ï∂îÏ≤ú Ï†êÏàò", 0, 100, 30)
        min_score_normalized = min_score / 100  # 0-100ÏùÑ 0-1Î°ú Ï†ïÍ∑úÌôî
        filtered_df = recommendations_df[recommendations_df['score'] >= min_score_normalized]
    
    with col2:
        # Í∏∞Í¥Ä ÌïÑÌÑ∞
        agencies = ['Ï†ÑÏ≤¥'] + sorted(recommendations_df['agency'].dropna().unique().tolist())
        selected_agency = st.selectbox("ÏßÄÏõêÍ∏∞Í¥Ä", agencies)
        if selected_agency != 'Ï†ÑÏ≤¥':
            filtered_df = filtered_df[filtered_df['agency'] == selected_agency]
    
    # Ï∂îÏ≤ú Í≤∞Í≥º ÌëúÏãú
    if not filtered_df.empty:
        st.success(f"üìä {len(filtered_df)}Í∞úÏùò ÎßûÏ∂§ Ï∂îÏ≤úÏùÑ Ï∞æÏïòÏäµÎãàÎã§!")
        
        # Ï†êÏàòÎ≥Ñ Ï†ïÎ†¨
        filtered_df = filtered_df.sort_values('score', ascending=False)
        
        # Ïπ¥Îìú ÌòïÌÉúÎ°ú ÌëúÏãú
        for idx, row in filtered_df.iterrows():
            score_display = int(row['score'] * 100)  # 0-1ÏùÑ 0-100ÏúºÎ°ú Î≥ÄÌôò
            
            # Ïπ¥Îìú Ïª®ÌÖåÏù¥ÎÑà
            with st.container():
                # Ï†êÏàòÏóê Îî∞Î•∏ ÏÉâÏÉÅ Í≤∞Ï†ï
                if score_display >= 80:
                    color = "üü¢"
                elif score_display >= 60:
                    color = "üü°"
                else:
                    color = "üî¥"
                
                # Î©îÏù∏ Ïπ¥Îìú
                st.markdown(f"""
                <div style="
                    border: 1px solid #e0e0e0;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 10px 0;
                    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                ">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px;">
                        <h3 style="margin: 0; color: #2c3e50; flex: 1;">{color} {row['announcement_title']}</h3>
                        <div style="text-align: right;">
                            <div style="font-size: 24px; font-weight: bold; color: #3498db;">{score_display}</div>
                            <div style="font-size: 12px; color: #7f8c8d;">Ï†êÏàò</div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º 2Ïó¥Î°ú ÌëúÏãú
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Í∏∞Î≥∏ Ï†ïÎ≥¥
                    info_col1, info_col2 = st.columns(2)
                    
                    with info_col1:
                        st.markdown(f"**üè¢ ÏßÄÏõêÍ∏∞Í¥Ä**\n{row['agency'] if pd.notna(row['agency']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                        st.markdown(f"**üìç ÏßÄÏó≠**\n{row['region'] if pd.notna(row['region']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                    
                    with info_col2:
                        st.markdown(f"**üéØ ÏßÄÏõêÎ∂ÑÏïº**\n{row['support_field'] if pd.notna(row['support_field']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                        st.markdown(f"**üìÖ Ïã†Ï≤≠Í∏∞Í∞Ñ**\n{row['application_period'] if pd.notna(row['application_period']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                    
                    # Í≥µÍ≥† ÎÇ¥Ïö© (ÏûàÎäî Í≤ΩÏö∞)
                    if pd.notna(row['announcement_content']) and row['announcement_content'].strip():
                        with st.expander("üìÑ Í≥µÍ≥† ÎÇ¥Ïö© Î≥¥Í∏∞", expanded=False):
                            st.write(row['announcement_content'])
                    
                    # Ï∂îÏ≤ú Ïù¥Ïú† (ÏûàÎäî Í≤ΩÏö∞)
                    if pd.notna(row['reason']) and row['reason'].strip():
                        with st.expander("üí° Ï∂îÏ≤ú Ïù¥Ïú† Î≥¥Í∏∞", expanded=False):
                            st.write(row['reason'])
                
                with col2:
                    # D-Day Í≥ÑÏÇ∞ Î∞è ÌëúÏãú
                    dday = calculate_dday(row['application_period'])
                    if dday is not None:
                        if dday > 0:
                            st.markdown(f"""
                            <div style="
                                background: #e8f5e8;
                                border: 1px solid #4caf50;
                                border-radius: 8px;
                                padding: 15px;
                                text-align: center;
                                margin-bottom: 10px;
                            ">
                                <div style="font-size: 18px; font-weight: bold; color: #2e7d32;">D-{dday}</div>
                                <div style="font-size: 12px; color: #4caf50;">Ïùº ÎÇ®Ïùå</div>
                            </div>
                            """, unsafe_allow_html=True)
                        elif dday == 0:
                            st.markdown(f"""
                            <div style="
                                background: #fff3e0;
                                border: 1px solid #ff9800;
                                border-radius: 8px;
                                padding: 15px;
                                text-align: center;
                                margin-bottom: 10px;
                            ">
                                <div style="font-size: 18px; font-weight: bold; color: #f57c00;">Ïò§Îäò ÎßàÍ∞ê!</div>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown(f"""
                            <div style="
                                background: #ffebee;
                                border: 1px solid #f44336;
                                border-radius: 8px;
                                padding: 15px;
                                text-align: center;
                                margin-bottom: 10px;
                            ">
                                <div style="font-size: 18px; font-weight: bold; color: #d32f2f;">D+{abs(dday)}</div>
                                <div style="font-size: 12px; color: #f44336;">Ïùº ÏßÄÎÇ®</div>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    # Í≥µÍ≥† Î≥¥Í∏∞ Î≤ÑÌäº
                    if pd.notna(row['url']) and row['url'].strip():
                        st.link_button("üîó Í≥µÍ≥† Î≥¥Í∏∞", row['url'], use_container_width=True)
                    else:
                        st.info("üîó ÎßÅÌÅ¨ ÏóÜÏùå")
                
                # Íµ¨Î∂ÑÏÑ†
                st.markdown("---")
    else:
        st.info("ÌïÑÌÑ∞ Ï°∞Í±¥Ïóê ÎßûÎäî Ï∂îÏ≤úÏù¥ ÏóÜÏäµÎãàÎã§.")

def render_new_announcement_alerts(company_name: str):
    """Ïã†Í∑ú Í≥µÍ≥† ÏïåÎ¶º ÌÉ≠"""
    st.subheader("üîî Ïã†Í∑ú Í≥µÍ≥† ÏïåÎ¶º")
    
    # Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    recommendations_df = load_recommendations(company_name)
    
    if recommendations_df.empty:
        st.info("Ìï¥Îãπ ÌöåÏÇ¨Ïóê ÎåÄÌïú Í≥µÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    # Ïª¨ÎüºÎ™Ö Îß§Ìïë
    column_mapping = {
        'Í≥µÍ≥†Î™Ö': 'announcement_title',
        'Í≥µÍ≥†_Í∏∞Í¥Ä': 'agency',
        'Í≥µÍ≥†_ÏßÄÏó≠': 'region',
        'Í≥µÍ≥†_ÏßÄÏõêÎ∂ÑÏïº': 'support_field',
        'Í≥µÍ≥†_Ïã†Ï≤≠Í∏∞Í∞Ñ': 'application_period',
        'Í≥µÍ≥†_ÎÇ¥Ïö©': 'announcement_content',
        'Ï∂îÏ≤ú_Ïù¥Ïú†': 'reason',
        'Í≥µÍ≥†_URL': 'url',
        'Ï∂îÏ≤ú_Ï†êÏàò': 'score',
        'ÏÉùÏÑ±_ÏãúÍ∞Ñ': 'created_at'
    }
    
    recommendations_df = recommendations_df.rename(columns=column_mapping)
    
    # ÏµúÍ∑º 30Ïùº ÎÇ¥ ÏÉùÏÑ±Îêú Í≥µÍ≥† ÌïÑÌÑ∞ÎßÅ
    if 'created_at' in recommendations_df.columns:
        recommendations_df['created_at'] = pd.to_datetime(recommendations_df['created_at'], errors='coerce')
        # timezone-aware datetimeÏúºÎ°ú Î≥ÄÌôò
        cutoff_date = pd.Timestamp.now(tz='UTC') - timedelta(days=30)
        recent_df = recommendations_df[recommendations_df['created_at'] >= cutoff_date]
    else:
        recent_df = recommendations_df
    
    if recent_df.empty:
        st.info("ÏµúÍ∑º 30Ïùº ÎÇ¥ Ïã†Í∑ú Í≥µÍ≥†Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    st.success(f"üì¢ {len(recent_df)}Í∞úÏùò Ïã†Í∑ú Í≥µÍ≥†Î•º Î∞úÍ≤¨ÌñàÏäµÎãàÎã§!")
    
    # Ïã†Í∑ú Í≥µÍ≥† Î™©Î°ù - Ïπ¥Îìú ÌòïÌÉúÎ°ú ÌëúÏãú
    for idx, row in recent_df.iterrows():
        score_display = int(row['score'] * 100)
        
        # Ïπ¥Îìú Ïª®ÌÖåÏù¥ÎÑà
        with st.container():
            # Ïã†Í∑ú Í≥µÍ≥† ÌëúÏãú
            st.markdown(f"""
            <div style="
                border: 2px solid #ff6b6b;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                background: linear-gradient(135deg, #fff5f5 0%, #ffffff 100%);
                box-shadow: 0 2px 4px rgba(255,107,107,0.2);
            ">
                <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px;">
                    <h3 style="margin: 0; color: #2c3e50; flex: 1;">üÜï {row['announcement_title']}</h3>
                    <div style="text-align: right;">
                        <div style="font-size: 24px; font-weight: bold; color: #ff6b6b;">{score_display}</div>
                        <div style="font-size: 12px; color: #7f8c8d;">Ï†êÏàò</div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º 2Ïó¥Î°ú ÌëúÏãú
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # Í∏∞Î≥∏ Ï†ïÎ≥¥
                info_col1, info_col2 = st.columns(2)
                
                with info_col1:
                    st.markdown(f"**üè¢ ÏßÄÏõêÍ∏∞Í¥Ä**\n{row['agency'] if pd.notna(row['agency']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                    st.markdown(f"**üìç ÏßÄÏó≠**\n{row['region'] if pd.notna(row['region']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                
                with info_col2:
                    st.markdown(f"**üéØ ÏßÄÏõêÎ∂ÑÏïº**\n{row['support_field'] if pd.notna(row['support_field']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                    st.markdown(f"**üìÖ Ïã†Ï≤≠Í∏∞Í∞Ñ**\n{row['application_period'] if pd.notna(row['application_period']) else 'Ï†ïÎ≥¥ ÏóÜÏùå'}")
                
                # Í≥µÍ≥† ÎÇ¥Ïö© (ÏûàÎäî Í≤ΩÏö∞)
                if pd.notna(row['announcement_content']) and row['announcement_content'].strip():
                    with st.expander("üìÑ Í≥µÍ≥† ÎÇ¥Ïö© Î≥¥Í∏∞", expanded=False):
                        st.write(row['announcement_content'])
            
            with col2:
                # D-Day Í≥ÑÏÇ∞ Î∞è ÌëúÏãú
                dday = calculate_dday(row['application_period'])
                if dday is not None:
                    if dday > 0:
                        st.markdown(f"""
                        <div style="
                            background: #e8f5e8;
                            border: 1px solid #4caf50;
                            border-radius: 8px;
                            padding: 15px;
                            text-align: center;
                            margin-bottom: 10px;
                        ">
                            <div style="font-size: 18px; font-weight: bold; color: #2e7d32;">D-{dday}</div>
                            <div style="font-size: 12px; color: #4caf50;">Ïùº ÎÇ®Ïùå</div>
                        </div>
                        """, unsafe_allow_html=True)
                    elif dday == 0:
                        st.markdown(f"""
                        <div style="
                            background: #fff3e0;
                            border: 1px solid #ff9800;
                            border-radius: 8px;
                            padding: 15px;
                            text-align: center;
                            margin-bottom: 10px;
                        ">
                            <div style="font-size: 18px; font-weight: bold; color: #f57c00;">Ïò§Îäò ÎßàÍ∞ê!</div>
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div style="
                            background: #ffebee;
                            border: 1px solid #f44336;
                            border-radius: 8px;
                            padding: 15px;
                            text-align: center;
                            margin-bottom: 10px;
                        ">
                            <div style="font-size: 18px; font-weight: bold; color: #d32f2f;">D+{abs(dday)}</div>
                            <div style="font-size: 12px; color: #f44336;">Ïùº ÏßÄÎÇ®</div>
                        </div>
                        """, unsafe_allow_html=True)
                
                # Í≥µÍ≥† Î≥¥Í∏∞ Î≤ÑÌäº
                if pd.notna(row['url']) and row['url'].strip():
                    st.link_button("üîó Í≥µÍ≥† Î≥¥Í∏∞", row['url'], use_container_width=True)
                else:
                    st.info("üîó ÎßÅÌÅ¨ ÏóÜÏùå")
            
            # Íµ¨Î∂ÑÏÑ†
            st.markdown("---")

def render_roadmap(company_name: str):
    """Î°úÎìúÎßµ ÌÉ≠"""
    st.subheader("üóìÔ∏è 12Í∞úÏõî Î°úÎìúÎßµ")
    
    # Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    recommendations_df = load_recommendations(company_name)
    
    if recommendations_df.empty:
        st.info("Ìï¥Îãπ ÌöåÏÇ¨Ïóê ÎåÄÌïú Í≥µÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    # Ïª¨ÎüºÎ™Ö Îß§Ìïë
    column_mapping = {
        'Í≥µÍ≥†Î™Ö': 'announcement_title',
        'Í≥µÍ≥†_Í∏∞Í¥Ä': 'agency',
        'Í≥µÍ≥†_ÏßÄÏó≠': 'region',
        'Í≥µÍ≥†_ÏßÄÏõêÎ∂ÑÏïº': 'support_field',
        'Í≥µÍ≥†_Ïã†Ï≤≠Í∏∞Í∞Ñ': 'application_period',
        'Í≥µÍ≥†_ÎÇ¥Ïö©': 'announcement_content',
        'Ï∂îÏ≤ú_Ïù¥Ïú†': 'reason',
        'Í≥µÍ≥†_URL': 'url',
        'Ï∂îÏ≤ú_Ï†êÏàò': 'score',
        'ÏÉùÏÑ±_ÏãúÍ∞Ñ': 'created_at'
    }
    
    recommendations_df = recommendations_df.rename(columns=column_mapping)
    
    # Î°úÎìúÎßµ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    roadmap_data = []
    
    for idx, row in recommendations_df.iterrows():
        if pd.notna(row['application_period']):
            try:
                period_str = str(row['application_period']).strip()
                if not period_str or period_str in ['', 'ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ≥Ñ ÏÉÅÏù¥', '-']:
                    continue
                
                if len(period_str) == 8 and period_str.isdigit():
                    year = int(period_str[:4])
                    month = int(period_str[4:6])
                    day = int(period_str[6:8])
                    start_date = datetime(year, month, day)
                elif '~' in period_str:
                    start_date_str = period_str.split('~')[0].strip()
                    date_formats = ['%Y-%m-%d', '%Y.%m.%d', '%m/%d/%Y', '%d/%m/%Y', '%Y%m%d']
                    start_date = None
                    for fmt in date_formats:
                        try:
                            start_date = datetime.strptime(start_date_str, fmt)
                            break
                        except ValueError:
                            continue
                else:
                    date_formats = ['%Y-%m-%d', '%Y.%m.%d', '%m/%d/%Y', '%d/%m/%Y', '%Y%m%d']
                    start_date = None
                    for fmt in date_formats:
                        try:
                            start_date = datetime.strptime(period_str, fmt)
                            break
                        except ValueError:
                            continue
                
                if start_date:
                    month = start_date.month
                    roadmap_data.append({
                        'month': month,
                        'title': row['announcement_title'],
                        'agency': row['agency'],
                        'score': row['score'],
                        'period': row['application_period'],
                        'url': row['url'],
                        'date': start_date
                    })
            except Exception as e:
                continue
    
    if not roadmap_data:
        st.info("Î°úÎìúÎßµÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏûàÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    roadmap_df = pd.DataFrame(roadmap_data)
    
    # ÏõîÎ≥Ñ Í≥µÍ≥† Ïàò ÌòÑÌô©
    st.subheader("üìä ÏõîÎ≥Ñ Í≥µÍ≥† Ïàò ÌòÑÌô©")
    monthly_counts = roadmap_df['month'].value_counts().sort_index()
    months_data = []
    for month in range(1, 13):
        count = monthly_counts.get(month, 0)
        months_data.append({'month': f'{month}Ïõî', 'count': count})
    months_df = pd.DataFrame(months_data)
    
    chart = alt.Chart(months_df).mark_bar(
        color='#1f77b4', cornerRadius=4
    ).encode(
        x=alt.X('month:O', sort=None, title='Ïõî'),
        y=alt.Y('count:Q', title='Í≥µÍ≥† Ïàò'),
        tooltip=['month', 'count']
    ).properties(width=600, height=300)
    
    st.altair_chart(chart, use_container_width=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Ï¥ù Í≥µÍ≥† Ïàò", len(roadmap_df))
    with col2:
        st.metric("ÌôúÏÑ± Ïõî Ïàò", len(monthly_counts))
    with col3:
        max_month = monthly_counts.idxmax() if not monthly_counts.empty else 0
        st.metric("Í∞ÄÏû• ÎßéÏùÄ Ïõî", f"{max_month}Ïõî" if max_month > 0 else "ÏóÜÏùå")
    
    st.divider()
    
    # ÏõîÎ≥Ñ ÏÉÅÏÑ∏ Î°úÎìúÎßµ
    st.subheader("üìÖ ÏõîÎ≥Ñ ÏÉÅÏÑ∏ Î°úÎìúÎßµ")
    
    # ÏõîÎ≥ÑÎ°ú Í∑∏Î£πÌôîÌïòÏó¨ ÏÉÅÏúÑ 3Í∞úÏî© ÌëúÏãú
    monthly_roadmap = roadmap_df.groupby('month').apply(lambda x: x.sort_values('score', ascending=False).head(3)).reset_index(drop=True)
    
    for month in range(1, 13):
        month_data = monthly_roadmap[monthly_roadmap['month'] == month]
        
        if not month_data.empty:
            st.subheader(f"üìÖ {month}Ïõî")
            
            for _, item in month_data.iterrows():
                with st.container():
                    score_display = int(item['score'] * 100)
                    st.write(f"**{item['title']}**")
                    st.write(f"üè¢ Í∏∞Í¥Ä: {item['agency']}")
                    st.write(f"‚≠ê Ï†êÏàò: {score_display}/100")
                    st.write(f"üìÖ Í∏∞Í∞Ñ: {item['period']}")
                    
                    if pd.notna(item['url']):
                        st.link_button("Í≥µÍ≥† Î≥¥Í∏∞", item['url'])
                    
                    st.divider()
        else:
            st.info(f"üì≠ {month}ÏõîÏóê Ï∂îÏ≤ú Í≥µÍ≥†Í∞Ä ÏóÜÏäµÎãàÎã§.")

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    # Ìó§Îçî
    st.title("üèõÔ∏è Ï†ïÎ∂ÄÏßÄÏõêÏÇ¨ÏóÖ ÎßûÏ∂§ Ï∂îÏ≤ú MVP")
    st.markdown("Ï†ïÎ∂ÄÏßÄÏõêÏÇ¨ÏóÖÍ≥º Ï¥àÍ∏∞ Ïä§ÌÉÄÌä∏ÏóÖ ÏûêÍ∏àÏ°∞Îã¨ÏùÑ ÏúÑÌïú ÎßûÏ∂§ Ï∂îÏ≤ú Î∞è Î°úÎìúÎßµ ÏÉùÏÑ± ÏãúÏä§ÌÖú")
    
    # ÌöåÏÇ¨ ÏÑ†ÌÉù
    companies_df = load_company_data()
    
    if companies_df.empty:
        st.error("ÌöåÏÇ¨ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
        return
    
    company_names = companies_df['ÌöåÏÇ¨Î™Ö'].unique().tolist()
    company_name = st.selectbox("ÌöåÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", company_names)
    
    if not company_name:
        st.warning("ÌöåÏÇ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
        return
    
    # ÌÉ≠ ÏÉùÏÑ±
    tab1, tab2, tab3 = st.tabs(["üéØ ÎßûÏ∂§ Ï∂îÏ≤ú", "üîî Ïã†Í∑ú Í≥µÍ≥† ÏïåÎ¶º", "üóìÔ∏è 12Í∞úÏõî Î°úÎìúÎßµ"])
    
    with tab1:
        render_custom_recommendations(company_name)
    
    with tab2:
        render_new_announcement_alerts(company_name)
    
    with tab3:
        render_roadmap(company_name)

if __name__ == "__main__":
    main()
